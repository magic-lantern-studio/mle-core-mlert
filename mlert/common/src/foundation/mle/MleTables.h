/** @defgroup MleFoundation Magic Lantern Runtime Engine Foundation Library API */

/**
 * @file MleTables.h
 * @ingroup MleFoundation
 *
 * @author Mark S. Millard
 * @created May 1, 2003
 */

// COPYRIGHT_BEGIN
//
// The MIT License (MIT)
//
// Copyright (c) 2015-2018 Wizzer Works
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//  For information concerning this header file, contact Mark S. Millard,
//  of Wizzer Works at msm@wizzerworks.com.
//
//  More information concerning Wizzer Works may be found at
//
//      http://www.wizzerworks.com
//
// COPYRIGHT_END

#ifndef __MLE_TABLES_H_
#define __MLE_TABLES_H_

/* Include Magic Lantern Runtime Player header files. */
#include "mle/MleObject.h"
#include "mle/MleActor.h"
#include "mle/MleRole.h"
#include "mle/MleSet.h"
#include "mle/MleGroup.h"
#include "mle/MleScene.h"
#include "mle/MleMediaRef.h"
#include "mle/MleProperty.h"


/* Define elements of title store table. */

typedef MlePropertyEntry MleRTPropertyEntry;

// Runtime Actor Type Table Entry.
typedef struct _MleRTActorClassEntry
{
    MleActor *(*constructor)(void);         /* init routine */
    int offset;                             /* property table offset */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTActorClassEntry;


// Runtime Role Type Table Entry.
typedef struct _MleRTRoleClassEntry
{
    MleRole *(*constructor)(MleActor *a);   /* init routine */
#if defined(MLE_DEBUG)
    int  size;                              /* size */
#endif /* MLE_DEBUG */
} MleRTRoleClassEntry;


// Runtime Set Type Table Entry.
typedef struct _MleRTSetClassEntry
{
    MleSet *(*constructor)(void);           /* init routine */
    int offset;                             /* property table offset */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTSetClassEntry;


// Runtime Set Table Entry
typedef struct _MleRTSetEntry
{
    MleSet *(*constructor)(void);           /* init routine */
    MleSet *ptr;                            /* pointer to instance */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTSetEntry;


// Runtime Group Type Table Entry
typedef struct _MleRTGroupClassEntry
{
    MleGroup *(*constructor)(void);         /* init routine */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTGroupClassEntry;


// Runtime Scene Type Table Entry
typedef struct _MleRTSceneClassEntry
{
    MleScene *(*constructor)(void);         /* init routine */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTSceneClassEntry;


// Runtime Media Reference Table Entry
typedef struct _MleRTMediaRefEntry
{
    MleMediaRef *(*constructor)(void);      /* init routine */
#if defined(MLE_DEBUG)
    int size;                               /* size */
#endif /* MLE_DEBUG */
} MleRTMediaRefEntry;


// These tables are generated by the targeting tools.
extern MleRTPropertyEntry mlRTActorProperties[];
extern MleRTPropertyEntry mlRTSetProperties[];
extern MleRTActorClassEntry mlRTActorClass[];
extern MleRTRoleClassEntry mlRTRoleClass[];
extern MleRTSetClassEntry mlRTSetClass[];
extern MleRTSetEntry mlRTSet[];
extern MleRTGroupClassEntry mlRTGroupClass[];
extern MleRTSceneClassEntry mlRTSceneClass[];
extern MleRTMediaRefEntry mlRTMediaRef[];

// This table gives the playprint chunk number for the corresponding
// set in the mleRTSet table. It is generated by the targeting
// tools.
extern int MleRTSetChunk[];

// This table gives the playprint chunk number for the corresponding
// group in the mleRTGroup table. It is generated by the targeting
// tools.
extern int MleRTGroupChunk[];

// This table gives the playprint chunk number for the corresponding
// scene in the mleRTScene table. It is generated by the targeting
// tools.
extern int MleRTSceneChunk[];


#if defined(MLE_DEBUG)

extern int mlRTActorPropertyLength;
extern int mlRTSetPropertyLength;
extern int mlRTActorClassLength;
extern int mlRTRoleClassLength;
extern int mlRTSetClassLength;
extern int mlRTSetLength;
extern int mlRTGroupClassLength;
extern int mlRTSceneClassLength;
extern int mlRTMediaRefLength;

typedef struct _MleRTIndexMapEntry
{
    char *str;     /* string value */
    int  index;    /* index value */
} MleRTIndexMapEntry;

#define MLE_INDEX_NULL -1

#endif /* MLE_DEBUG */

#endif /* _MLE_TABLES_H_ */
